generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                       Int                       @id @default(autoincrement())
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  name                     String                    @unique(map: "sqlite_autoindex_Account_1")
  institution              String?
  isClosed                 Boolean
  isAutoCalculated         Boolean
  balanceGroup             Int
  accountTypeId            Int
  accountType              AccountType               @relation(fields: [accountTypeId], references: [id])
  accountBalanceStatements AccountBalanceStatement[]
  transactions             Transaction[]
}

model AccountBalanceStatement {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value     Float
  accountId Int?
  account   Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, createdAt], map: "sqlite_autoindex_AccountBalanceStatement_1")
}

model AccountType {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  accounts  Account[]
}

model Asset {
  id                     Int                     @id @default(autoincrement())
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  name                   String                  @unique(map: "sqlite_autoindex_Asset_1")
  balanceGroup           Int
  isSold                 Boolean
  symbol                 String?
  assetTypeId            Int
  assetType              AssetType               @relation(fields: [assetTypeId], references: [id])
  assetBalanceStatements AssetBalanceStatement[]
}

model AssetBalanceStatement {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value     Float    @default(0)
  quantity  Float?
  cost      Float?
  assetId   Int?
  asset     Asset?   @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@unique([assetId, createdAt], map: "sqlite_autoindex_AssetBalanceStatement_1")
}

model AssetType {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  assets    Asset[]
}

model Transaction {
  id                  Int                 @id @default(autoincrement())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  description         String
  date                DateTime
  value               Float
  isExcluded          Boolean
  isPending           Boolean
  categoryId          Int
  accountId           Int
  importedAt          DateTime?
  transactionCategory TransactionCategory @relation(fields: [categoryId], references: [id])
  account             Account             @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model TransactionCategory {
  id                       Int                      @id @default(autoincrement())
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  name                     String
  transactionCategoryId    Int
  transactionCategoryGroup TransactionCategoryGroup @relation(fields: [transactionCategoryId], references: [id])
  transactions             Transaction[]
}

model TransactionCategoryGroup {
  id                    Int                   @id @default(autoincrement())
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  name                  String                @unique(map: "sqlite_autoindex_TransactionCategoryGroup_1")
  transactionCategories TransactionCategory[]
}

model Setting {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique(map: "sqlite_autoindex_Setting_1")
  value     String
}
